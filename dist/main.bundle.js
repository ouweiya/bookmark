!function(e){function t(t){for(var n,i,c=t[0],l=t[1],u=t[2],f=0,d=[];f<c.length;f++)i=c[f],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&d.push(a[i][0]),a[i]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(s&&s(t);d.length;)d.shift()();return o.push.apply(o,u||[]),r()}function r(){for(var e,t=0;t<o.length;t++){for(var r=o[t],n=!0,c=1;c<r.length;c++){var l=r[c];0!==a[l]&&(n=!1)}n&&(o.splice(t--,1),e=i(i.s=r[0]))}return e}var n={},a={0:0},o=[];function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=n,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var s=l;o.push([80,1]),r()}({74:function(e,t,r){},80:function(e,t,r){"use strict";r.r(t);var n=r(0),a=r.n(n),o=r(8),i=r.n(o),c=r(141),l=r(140),u=r(59),s=r(58),f=r.n(s);r(74);function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(n=(i=c.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==c.return||c.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function m(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?m(r,!0).forEach(function(t){h(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):m(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var b=a.a.createContext(null),y=function(e,t){switch(t.type){case"filtxt":return p({},e,{filtxt:t.filtxt});case"two":return p({},e,{num:e.num-1});default:return e}},g={filtxt:""},v=function(e){var t=d(Object(n.useReducer)(y,g),2),r=t[0],o=t[1];return a.a.createElement(b.Provider,{value:[r,o]},e.children)},E=r(124),O=r(146),w=r(55),k=r(56),x=r.n(k);function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(n=(i=c.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==c.return||c.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var C=Object(w.a)(function(e){return{root:{display:"flex",justifyContent:"center"},search:{display:"flex",height:40,width:"39%",maxWidth:460,minWidth:280,borderRadius:"100px",color:"#757575",background:"white",boxShadow:"0 1px 6px 0 rgba(32, 33, 36, .28)",boxSizing:"border-box",transition:"0.2s","&:hover":{boxShadow:"0 1px 9px 0 rgba(32, 33, 36, .30)"}},searchIcon:{width:e.spacing(7),height:"100%",pointerEvents:"none",display:"flex",alignItems:"center",justifyContent:"center"},inputRoot:{color:"inherit",flex:1}}});function P(){var e=C(),t=j(Object(n.useContext)(b),2),r=t[0].filtxt,o=t[1];return a.a.createElement("div",null,a.a.createElement(E.a,{className:e.root},a.a.createElement("div",{className:e.search},a.a.createElement("div",{className:e.searchIcon},a.a.createElement(x.a,null)),a.a.createElement(O.a,{placeholder:"Search…",value:r,onChange:function(e){return o({type:"filtxt",filtxt:e.target.value})},classes:{root:e.inputRoot}}))))}var S=r(132),R=r(128),L=r(32),A=r(133),N=r(142),D=r(131),I=r(57),T=r.n(I),z=r(4),B=r(130),M=r(145),_=r(125),F=r(126),W=r(127),J=r(143);function G(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function H(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function V(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(n=(i=c.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==c.return||c.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var q=Object(z.a)(function(e){return{root:{margin:0,padding:e.spacing(2),paddingBottom:0,display:"flex",alignItems:"center"}}})(function(e){var t=e.children,r=e.classes;return a.a.createElement(_.a,{disableTypography:!0,className:r.root},a.a.createElement(L.a,{variant:"body2"},t))}),K=Object(z.a)(function(e){return{root:{padding:e.spacing(1)}}})(F.a),Q=Object(z.a)(function(e){return{root:{margin:0,padding:e.spacing(1)}}})(W.a),U=Object(w.a)(function(e){return{box:{"& .MuiBackdrop-root":{background:"#ffffff8a"}},container:{display:"flex",flexFlow:"column wrap",width:352},textField:{marginLeft:e.spacing(1),marginRight:e.spacing(1)}}});function X(e){var t,r=U(),n=V(a.a.useState(e.data),2),o=n[0],i=n[1],c=function(e){return function(t){return i(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?G(r,!0).forEach(function(t){H(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):G(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({},o,H({},e,t.target.value)))}};return a.a.createElement("div",null,a.a.createElement(M.a,{onClose:e.onClose,open:e.open,className:r.box},a.a.createElement(q,{onClose:e.onClose},"修改快捷方式"),a.a.createElement(K,null,a.a.createElement("form",{className:r.container,noValidate:!0,autoComplete:"off"},a.a.createElement(J.a,{label:"标题",className:r.textField,value:o.title,onChange:c("title"),margin:"normal",InputLabelProps:{shrink:!0}}),a.a.createElement(J.a,{label:"地址",className:r.textField,value:o.url,onChange:c("url"),margin:"normal",InputLabelProps:{shrink:!0}}))),a.a.createElement(Q,null,a.a.createElement(B.a,{onClick:(t=e.data,function(r){e.onClose(),i(t)}),color:"primary",variant:"outlined",size:"small"},"取消"),a.a.createElement(B.a,{onClick:function(){e.onClose(),chrome.bookmarks.update(e.id,{title:o.title,url:o.url})},color:"primary",variant:"contained",size:"small"},"保存"))))}function Y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(n=(i=c.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==c.return||c.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Z=Object(w.a)(function(e){return{btn:{position:"absolute",right:0,top:0,fontSize:12,"&:hover":{background:"none",color:"#000"}},icon:{transform:"scale(0.8)"},dis:{visibility:"hidden"}}}),$=function(e){var t=e.data,r=e.id,n=Y(a.a.useState(!1),2),o=n[0],i=n[1],c=Z();return a.a.createElement("div",null,a.a.createElement(D.a,{onClick:function(e){return i(!0)},className:"".concat(c.btn," ").concat(c.dis),disableRipple:!1,size:"small",disableFocusRipple:!0,edge:"end",classes:{label:c.icon},id:"dis"},a.a.createElement(T.a,null)),a.a.createElement(X,{open:o,onClose:function(e){return i(!1)},data:t,id:r}))},ee=Object(w.a)(function(e){return{root:{flexGrow:1},paper:{display:"flex",padding:e.spacing(1),paddingTop:e.spacing(2),paddingBottom:e.spacing(2),margin:e.spacing(0),width:112,height:112,background:"none",position:"relative",transition:"0.3s","&:hover":{background:"rgba(32, 33, 36, 0.06)"}},image:{width:48,height:48,marginRight:"auto",marginLeft:"auto",marginBottom:"auto",background:"#f1f3f4",borderRadius:"50%"},img:{margin:"auto",display:"block",maxWidth:"100%",maxHeight:"100%"},link:{flex:1,textAlign:"center",width:"100%",display:"flex",flexDirection:"column"}}}),te=function(e){var t=e.Bookmark,r=t.title,n=t.url,o=t.id,i=ee();return a.a.createElement(R.a,{className:i.paper,elevation:0,id:"par"},a.a.createElement(S.a,{item:!0,container:!0,direction:"column"},a.a.createElement(A.a,{href:t.url,title:t.title,color:"inherit",underline:"none",className:i.link},a.a.createElement(N.a,{className:i.image,display:"flex"},a.a.createElement("img",{className:i.img,src:"chrome://favicon/size/24/".concat(t.url)})),a.a.createElement(L.a,{variant:"body2",noWrap:!0,style:{fontSize:"12px"}},t.title)),a.a.createElement($,{data:{title:r,url:n},id:o})))},re=r(134);function ne(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(n=(i=c.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==c.return||c.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var ae=function(){var e=ne(Object(n.useContext)(b),2),t=e[0].filtxt,r=(e[1],ne(Object(n.useState)([]),2)),o=r[0],i=r[1],c=function e(t,r){return Array.isArray(r.children)?[r.children].reduce(e,t):t.concat(r)},l=function(e){chrome.bookmarks.getSubTree(e,function(e){var t=e[0].children.reduce(c,[]);i(t)})};return Object(n.useEffect)(function(){chrome.bookmarks.search({title:"nav"},function(e){l(e[0].id),chrome.bookmarks.onRemoved.addListener(function(t){return l(e[0].id)}),chrome.bookmarks.onCreated.addListener(function(t){return l(e[0].id)}),chrome.bookmarks.onChildrenReordered.addListener(function(e){return console.log("onChildrenReordered")}),chrome.bookmarks.onMoved.addListener(function(t){return l(e[0].id)}),chrome.bookmarks.onChanged.addListener(function(t){return l(e[0].id)})})},[]),a.a.createElement(re.a,null,a.a.createElement(P,null),a.a.createElement(S.a,{container:!0,spacing:1},o.filter(function(e){return(e.title+e.url).toLowerCase().includes(t.toLowerCase())}).map(function(e){return a.a.createElement(te,{key:e.id,Bookmark:e})})))},oe=r(129),ie=r(135),ce=r(137),le=r(139),ue=r(138),se=r(136);function fe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(n=(i=c.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==c.return||c.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function de(){return(de=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var me=Object(w.a)(function(e){return{root:{width:"auto",backgroundColor:e.palette.background.paper},inputRoot:{color:"inherit",paddingLeft:0},iconRoot:{minWidth:"auto"},avatar:{width:30,height:30,marginRight:10},img:{width:"auto",height:"auto"},item:{padding:"0 16px"}}}),pe=function(e){var t=me();return a.a.createElement(ie.a,de({component:"a"},e,{classes:{root:t.inputRoot}}))},he=function(){var e=fe(Object(n.useState)([]),2),t=e[0],r=e[1],o=me();Object(n.useLayoutEffect)(function(){document.title="todo"},[]);var i=function e(t,r){return Array.isArray(r.children)?[r.children].reduce(e,t):t.concat(r)},c=function(e){chrome.bookmarks.getSubTree(e,function(e){var t=e[0].children.reduce(i,[]);r(t)})};Object(n.useEffect)(function(){chrome.bookmarks.search({title:"todo"},function(e){c(e[0].id),chrome.bookmarks.onRemoved.addListener(function(t){return c(e[0].id)}),chrome.bookmarks.onCreated.addListener(function(t){return c(e[0].id)}),chrome.bookmarks.onChildrenReordered.addListener(function(e){return console.log("onChildrenReordered")}),chrome.bookmarks.onMoved.addListener(function(t){return c(e[0].id)}),chrome.bookmarks.onChanged.addListener(function(t){return c(e[0].id)})})},[]);var l=[],u=null;return t.forEach(function(e){var t=new Date(e.dateAdded);t.getDate()!==u&&(l[l.length]||(l[l.length]=[]),l[l.length-1].push(a.a.createElement(se.a,{key:t.getDate(),component:"div"},t.toLocaleDateString().split("/").join("-")))),l[l.length-1].push(a.a.createElement(ie.a,{button:!0,key:e.id,className:o.item},a.a.createElement(pe,{href:e.url,title:e.title},a.a.createElement(ce.a,{classes:{root:o.iconRoot}},a.a.createElement(ue.a,{src:"chrome://favicon/size/16/".concat(e.url),className:o.avatar,classes:{img:o.img}})),a.a.createElement(le.a,{primary:e.title})))),u=t.getDate()}),a.a.createElement(re.a,null,a.a.createElement("div",{className:o.root},a.a.createElement(oe.a,{component:"nav",dense:!0},l.reverse())))},be=Object(u.a)({palette:{primary:f.a}});i.a.render(a.a.createElement(l.a,{theme:be},a.a.createElement(c.a,null),a.a.createElement(v,null,"#todo"===location.hash?a.a.createElement(he,null):a.a.createElement(ae,null))),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,